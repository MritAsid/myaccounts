

// ================================
// ================================
//                    goood
// ================================
// ================================
/* import 'package:flutter/material.dart';
import 'package:google_sign_in/google_sign_in.dart' as google_sign_in;
import 'package:shared_preferences/shared_preferences.dart';
import '../database/database_helper.dart';
import 'package:file_picker/file_picker.dart';
import 'package:permission_handler/permission_handler.dart';
import 'dart:io';

class BackupRestorePage extends StatefulWidget {
  const BackupRestorePage({super.key});

  @override
  _BackupRestorePageState createState() => _BackupRestorePageState();
}

class _BackupRestorePageState extends State<BackupRestorePage> {
  final DatabaseHelper dbHelper = DatabaseHelper();
  final GlobalKey<ScaffoldState> _scaffoldKey = GlobalKey<ScaffoldState>();

  final google_sign_in.GoogleSignIn _googleSignIn =
      google_sign_in.GoogleSignIn(scopes: ['email']);
  Map<String, String?>? _currentUserData;

  // متغيرات لإدارة حالة التحميل لكل عملية
  bool _isLocalBackupLoading = false;
  bool _isLocalRestoreLoading = false;
  bool _isDriveBackupLoading = false;
  bool _isDriveRestoreLoading = false;

  @override
  void initState() {
    super.initState();
    _loadUserFromLocalStorage();
  }

  /// ✅ تحميل بيانات المستخدم المخزنة محليًا
  Future<void> _loadUserFromLocalStorage() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    String? email = prefs.getString('user_email');
    String? displayName = prefs.getString('user_name');
    String? photoUrl = prefs.getString('user_photo');

    if (email != null) {
      setState(() {
        _currentUserData = {
          "email": email,
          "displayName": displayName,
          "photoUrl": photoUrl,
        };
      });
    }
  }

  /// ✅ حفظ بيانات المستخدم عند تسجيل الدخول
  Future<void> _saveUserToLocalStorage(
      google_sign_in.GoogleSignInAccount user) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    await prefs.setString('user_email', user.email);
    await prefs.setString('user_name', user.displayName ?? '');
    await prefs.setString('user_photo', user.photoUrl ?? '');

    setState(() {
      _currentUserData = {
        "email": user.email,
        "displayName": user.displayName,
        "photoUrl": user.photoUrl,
      };
    });
  }

  /// 🟢 تسجيل الدخول
  Future<void> _handleSignIn() async {
    try {
      final google_sign_in.GoogleSignInAccount? user =
          await _googleSignIn.signIn();

      if (user == null) {
        return;
      }

      await _saveUserToLocalStorage(user);

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('✅ تم تسجيل الدخول بنجاح: ${user.displayName}'),
          backgroundColor: Colors.green,
        ),
      );
    } catch (error) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
            content: Text('⚠️ فشل تسجيل الدخول: $error'),
            backgroundColor: Colors.red),
      );
    }
  }

  /// 🔴 تسجيل الخروج
  Future<void> _handleSignOut() async {
    try {
      await _googleSignIn.signOut();
      SharedPreferences prefs = await SharedPreferences.getInstance();
      await prefs.clear();
      setState(() {
        _currentUserData = null;
      });
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('✅ تم تسجيل الخروج بنجاح'),
          backgroundColor: Colors.green,
        ),
      );
    } catch (error) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
            content: Text('⚠️ فشل تسجيل الخروج: $error'),
            backgroundColor: Colors.red),
      );
    }
  }

  /// طلب إذن التخزين
  Future<void> requestStoragePermission(BuildContext context) async {
    if (await Permission.storage.request().isGranted) {
      // إذن الوصول ممنوح
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('⚠️ تم رفض إذن الوصول إلى الذاكرة الخارجية'),
          backgroundColor: Colors.red,
        ),
      );
    }
  }

  /// عمليات النسخ والاستعادة مع مؤشر تقدم
  Future<void> _createBackup(BuildContext context) async {
    setState(() => _isLocalBackupLoading = true);
    try {
      await requestStoragePermission(context);
      final backupFile = await dbHelper.exportDatabase();
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('✅ تم إنشاء النسخة الاحتياطية: ${backupFile.path}'),
          backgroundColor: Colors.green,
        ),
      );
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
            content: Text('⚠️ فشل إنشاء النسخة الاحتياطية: $e'),
            backgroundColor: Colors.red),
      );
    } finally {
      setState(() => _isLocalBackupLoading = false);
    }
  }

  Future<void> _restoreBackup(BuildContext context) async {
    setState(() => _isLocalRestoreLoading = true);
    try {
      await requestStoragePermission(context);
      final result = await FilePicker.platform.pickFiles(type: FileType.any);

      if (result != null) {
        final file = File(result.files.single.path!);
        if (await file.exists()) {
          await dbHelper.importDatabase(file);
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Text('✅ تم استعادة النسخة الاحتياطية بنجاح'),
              backgroundColor: Colors.green,
            ),
          );
        } else {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
                content: Text('⚠️ الملف غير موجود'),
                backgroundColor: Colors.red),
          );
        }
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
            content: Text('⚠️ فشل استعادة النسخة الاحتياطية: $e'),
            backgroundColor: Colors.red),
      );
    } finally {
      setState(() => _isLocalRestoreLoading = false);
    }
  }

  Future<void> _backupToGoogleDrive(BuildContext context) async {
    setState(() => _isDriveBackupLoading = true);
    try {
      String result = await dbHelper.backupToGoogleDrive();
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(result),
          backgroundColor: result.contains('✅') ? Colors.green : Colors.red,
        ),
      );
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
            content: Text('⚠️ فشل النسخ إلى Google Drive: $e'),
            backgroundColor: Colors.red),
      );
    } finally {
      setState(() => _isDriveBackupLoading = false);
    }
  }

  Future<void> _restoreBackupFromGoogleDrive(BuildContext context) async {
    setState(() => _isDriveRestoreLoading = true);
    try {
      String result = await dbHelper.restoreBackupFromGoogleDrive();
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(result),
          backgroundColor: result.contains('✅') ? Colors.green : Colors.red,
        ),
      );
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
            content: Text('⚠️ فشل الاستعادة من Google Drive: $e'),
            backgroundColor: Colors.red),
      );
    } finally {
      setState(() => _isDriveRestoreLoading = false);
    }
  }

  /// دالة لإرجاع لون ثابت بناءً على البريد الإلكتروني
  Color getColorFromEmail(String email) {
    int hash = email.hashCode;
    return Color((hash & 0xFFFFFF) | 0xFF000000);
  }

  /// دالة لإرجاع الحرف الأول من الاسم
  String getInitials(String name) {
    if (name.isEmpty) return '';
    List<String> parts = name.split(' ');
    if (parts.length == 1) {
      return parts[0][0].toUpperCase();
    } else {
      return '${parts[0][0].toUpperCase()}${parts[1][0].toUpperCase()}';
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      key: _scaffoldKey,
      appBar: AppBar(
        title: const Text('النسخ الاحتياطي والاستعادة',
            style: TextStyle(fontWeight: FontWeight.bold)),
        backgroundColor: Colors.cyan,
        elevation: 4,
      ),
      drawer: Drawer(
        child: Column(
          children: [
            Container(
              margin: const EdgeInsets.fromLTRB(0, 16, 0, 0),
              padding: const EdgeInsets.fromLTRB(20, 16, 20, 0),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  const Text('حساباتي',
                      style:
                          TextStyle(fontSize: 20, fontWeight: FontWeight.bold)),
                  IconButton(
                    icon: const Icon(Icons.close, color: Colors.red),
                    onPressed: () => Navigator.pop(context),
                  ),
                ],
              ),
            ),
            const Divider(color: Colors.cyan, thickness: 2),
            if (_currentUserData != null) ...[
              Container(
                width: double.infinity,
                decoration: BoxDecoration(
                  image: const DecorationImage(
                    image: AssetImage('images/google.jpg'),
                    fit: BoxFit.cover,
                  ),
                  boxShadow: [
                    BoxShadow(
                        color: Colors.black.withOpacity(0.2), blurRadius: 8)
                  ],
                ),
                child: Container(
                  color: Colors.black.withOpacity(0.6),
                  padding: const EdgeInsets.all(16),
                  child: Column(
                    children: [
                      const Text(
                        'تم تسجيل الدخول إلى Google بواسطة',
                        style: TextStyle(color: Colors.white, fontSize: 16),
                      ),
                      const SizedBox(height: 10),
                      CircleAvatar(
                        radius: 35,
                        backgroundColor:
                            _currentUserData!["photoUrl"] == null ||
                                    !_currentUserData!["photoUrl"]!
                                        .startsWith("http")
                                ? getColorFromEmail(
                                    _currentUserData!["email"] ?? '')
                                : null,
                        backgroundImage:
                            _currentUserData!["photoUrl"] != null &&
                                    _currentUserData!["photoUrl"]!
                                        .startsWith("http")
                                ? NetworkImage(_currentUserData!["photoUrl"]!)
                                : null,
                        child: _currentUserData!["photoUrl"] == null ||
                                !_currentUserData!["photoUrl"]!
                                    .startsWith("http")
                            ? Text(
                                getInitials(
                                    _currentUserData!["displayName"] ?? ''),
                                style: const TextStyle(
                                    color: Colors.white, fontSize: 24),
                              )
                            : null,
                      ),
                      const SizedBox(height: 10),
                      Text(
                        _currentUserData!["displayName"] ?? 'مستخدم غير معروف',
                        style: const TextStyle(
                            color: Colors.white,
                            fontSize: 18,
                            fontWeight: FontWeight.bold),
                      ),
                      Text(
                        _currentUserData!["email"] ?? 'بريد غير متاح',
                        style: const TextStyle(
                            color: Colors.yellowAccent, fontSize: 16),
                      ),
                      const SizedBox(height: 20),
                    ],
                  ),
                ),
              ),
              const Divider(color: Colors.cyan, thickness: 2),
              Padding(
                padding: const EdgeInsets.all(16.0),
                child: ElevatedButton.icon(
                  onPressed: _handleSignOut,
                  icon: const Icon(Icons.logout),
                  label: const Text('تسجيل الخروج'),
                  style: ElevatedButton.styleFrom(
                    foregroundColor: Colors.white,
                    backgroundColor: Colors.redAccent,
                    shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(12)),
                  ),
                ),
              ),
            ] else ...[
              Padding(
                padding: const EdgeInsets.all(16.0),
                child: ElevatedButton.icon(
                  onPressed: _handleSignIn,
                  icon: const Icon(Icons.login),
                  label: const Text('تسجيل الدخول باستخدام Google'),
                  style: ElevatedButton.styleFrom(
                    foregroundColor: Colors.white,
                    backgroundColor: Colors.cyan,
                    shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(12)),
                  ),
                ),
              ),
            ],
          ],
        ),
      ),
      body: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
            colors: [Colors.cyan.shade50, Colors.white],
          ),
        ),
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Expanded(
                child: ListView(
                  children: [
                    // مربع النسخ الاحتياطي المحلي
                    Card(
                      elevation: 4,
                      shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(16)),
                      child: Padding(
                        padding: const EdgeInsets.all(16.0),
                        child: Column(
                          children: [
                            const Text(
                              'محلي',
                              style: TextStyle(
                                fontSize: 20,
                                fontWeight: FontWeight.bold,
                                color: Colors.cyan,
                              ),
                            ),
                            const Divider(color: Colors.cyan, thickness: 2),
                            const SizedBox(height: 10),
                            ElevatedButton.icon(
                              onPressed: _isLocalBackupLoading
                                  ? null
                                  : () => _createBackup(context),
                              icon: _isLocalBackupLoading
                                  ? const SizedBox(
                                      width: 20,
                                      height: 20,
                                      child: CircularProgressIndicator(
                                        strokeWidth: 2,
                                        color: Colors.white,
                                      ),
                                    )
                                  : const Icon(Icons.backup),
                              label: Text(
                                _isLocalBackupLoading
                                    ? 'جارٍ إنشاء النسخة...'
                                    : 'إنشاء نسخة احتياطية محليًا',
                              ),
                              style: ElevatedButton.styleFrom(
                                foregroundColor: Colors.white,
                                backgroundColor: Colors.cyan,
                                padding: const EdgeInsets.symmetric(
                                    horizontal: 20, vertical: 12),
                                shape: RoundedRectangleBorder(
                                    borderRadius: BorderRadius.circular(12)),
                              ),
                            ),
                            const SizedBox(height: 10),
                            ElevatedButton.icon(
                              onPressed: _isLocalRestoreLoading
                                  ? null
                                  : () => _restoreBackup(context),
                              icon: _isLocalRestoreLoading
                                  ? const SizedBox(
                                      width: 20,
                                      height: 20,
                                      child: CircularProgressIndicator(
                                        strokeWidth: 2,
                                        color: Colors.white,
                                      ),
                                    )
                                  : const Icon(Icons.restore),
                              label: Text(
                                _isLocalRestoreLoading
                                    ? 'جارٍ الاستعادة...'
                                    : 'استعادة نسخة احتياطية محليًا',
                              ),
                              style: ElevatedButton.styleFrom(
                                foregroundColor: Colors.white,
                                backgroundColor: Colors.cyan,
                                padding: const EdgeInsets.symmetric(
                                    horizontal: 20, vertical: 12),
                                shape: RoundedRectangleBorder(
                                    borderRadius: BorderRadius.circular(12)),
                              ),
                            ),
                          ],
                        ),
                      ),
                    ),
                    const SizedBox(height: 20),
                    // مربع Google Drive
                    Card(
                      elevation: 4,
                      shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(16)),
                      child: Padding(
                        padding: const EdgeInsets.all(16.0),
                        child: Column(
                          children: [
                            const Text(
                              'Google Drive',
                              style: TextStyle(
                                fontSize: 20,
                                fontWeight: FontWeight.bold,
                                color: Colors.cyan,
                              ),
                            ),
                            const Divider(color: Colors.cyan, thickness: 2),
                            const SizedBox(height: 10),
                            ElevatedButton.icon(
                              onPressed: _isDriveBackupLoading
                                  ? null
                                  : () => _backupToGoogleDrive(context),
                              icon: _isDriveBackupLoading
                                  ? const SizedBox(
                                      width: 20,
                                      height: 20,
                                      child: CircularProgressIndicator(
                                        strokeWidth: 2,
                                        color: Colors.white,
                                      ),
                                    )
                                  : const Icon(Icons.cloud_upload),
                              label: Text(
                                _isDriveBackupLoading
                                    ? 'جارٍ الرفع...'
                                    : 'رفع النسخة إلى Google Drive',
                              ),
                              style: ElevatedButton.styleFrom(
                                foregroundColor: Colors.white,
                                backgroundColor: Colors.cyan,
                                padding: const EdgeInsets.symmetric(
                                    horizontal: 20, vertical: 12),
                                shape: RoundedRectangleBorder(
                                    borderRadius: BorderRadius.circular(12)),
                              ),
                            ),
                            const SizedBox(height: 10),
                            ElevatedButton.icon(
                              onPressed: _isDriveRestoreLoading
                                  ? null
                                  : () =>
                                      _restoreBackupFromGoogleDrive(context),
                              icon: _isDriveRestoreLoading
                                  ? const SizedBox(
                                      width: 20,
                                      height: 20,
                                      child: CircularProgressIndicator(
                                        strokeWidth: 2,
                                        color: Colors.white,
                                      ),
                                    )
                                  : const Icon(Icons.cloud_download),
                              label: Text(
                                _isDriveRestoreLoading
                                    ? 'جارٍ الاستعادة...'
                                    : 'استعادة من Google Drive',
                              ),
                              style: ElevatedButton.styleFrom(
                                foregroundColor: Colors.white,
                                backgroundColor: Colors.cyan,
                                padding: const EdgeInsets.symmetric(
                                    horizontal: 20, vertical: 12),
                                shape: RoundedRectangleBorder(
                                    borderRadius: BorderRadius.circular(12)),
                              ),
                            ),
                          ],
                        ),
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

 */






/* import 'package:flutter/material.dart';
import 'package:google_sign_in/google_sign_in.dart' as google_sign_in;
import 'package:shared_preferences/shared_preferences.dart';
import '../database/database_helper.dart';
import 'package:file_picker/file_picker.dart';
import 'package:permission_handler/permission_handler.dart';
import 'dart:io';

class BackupRestorePage extends StatefulWidget {
  const BackupRestorePage({super.key});

  @override
  // ignore: library_private_types_in_public_api
  _BackupRestorePageState createState() => _BackupRestorePageState();
}

class _BackupRestorePageState extends State<BackupRestorePage> {
  final DatabaseHelper dbHelper = DatabaseHelper();
  final GlobalKey<ScaffoldState> _scaffoldKey = GlobalKey<ScaffoldState>();

  final google_sign_in.GoogleSignIn _googleSignIn =
      google_sign_in.GoogleSignIn(scopes: ['email']);
  Map<String, String?>? _currentUserData;

  @override
  void initState() {
    super.initState();
    _loadUserFromLocalStorage();
  }

  /// ✅ **تحميل بيانات المستخدم المخزنة محليًا**
  Future<void> _loadUserFromLocalStorage() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    String? email = prefs.getString('user_email');
    String? displayName = prefs.getString('user_name');
    String? photoUrl = prefs.getString('user_photo');

    if (email != null) {
      setState(() {
        _currentUserData = {
          "email": email,
          "displayName": displayName,
          "photoUrl": photoUrl,
        };
      });
    }
  }

  /// ✅ **حفظ بيانات المستخدم عند تسجيل الدخول**
  Future<void> _saveUserToLocalStorage(
      google_sign_in.GoogleSignInAccount user) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    await prefs.setString('user_email', user.email);
    await prefs.setString('user_name', user.displayName ?? '');
    await prefs.setString('user_photo', user.photoUrl ?? '');

    setState(() {
      _currentUserData = {
        "email": user.email,
        "displayName": user.displayName,
        "photoUrl": user.photoUrl,
      };
    });
  }

  /// 🟢 **تسجيل الدخول**
  Future<void> _handleSignIn() async {
    try {
      final google_sign_in.GoogleSignInAccount? user =
          await _googleSignIn.signIn();

      if (user == null) {
        // print("⚠️ المستخدم ألغى تسجيل الدخول");
        return;
      }

      await _saveUserToLocalStorage(user);

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('✅ تم تسجيل الدخول بنجاح: ${user.displayName}')),
      );
    } catch (error) {
      print("❌ خطأ في تسجيل الدخول: $error");
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('⚠️ فشل تسجيل الدخول: $error')),
      );
    }
  }

  /// 🔴 **تسجيل الخروج**
  Future<void> _handleSignOut() async {
    try {
      await _googleSignIn.signOut();
      SharedPreferences prefs = await SharedPreferences.getInstance();
      await prefs.clear(); // ✅ حذف بيانات المستخدم من التخزين المحلي
      setState(() {
        _currentUserData = null;
      });
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('تم تسجيل الخروج بنجاح')),
      );
    } catch (error) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('⚠️ فشل تسجيل الخروج: $error')),
      );
    }
  }

// =========================================================
// =========================================================
// =========================================================
  Future<void> requestStoragePermission(BuildContext context) async {
    if (await Permission.storage.request().isGranted) {
      // إذن الوصول ممنوح
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('تم رفض إذن الوصول إلى الذاكرة الخارجية'),
          backgroundColor: Colors.red,
        ),
      );
    }
  }

  Future<void> _createBackup(BuildContext context) async {
    try {
      await requestStoragePermission(context);
      final backupFile = await dbHelper.exportDatabase();
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('تم إنشاء النسخة الاحتياطية: ${backupFile.path}'),
          backgroundColor: Colors.green,
        ),
      );
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('فشل إنشاء النسخة الاحتياطية: $e'),
          backgroundColor: Colors.red,
        ),
      );
    }
  }

  Future<void> _restoreBackup(BuildContext context) async {
    try {
      await requestStoragePermission(context);
      final result = await FilePicker.platform.pickFiles(type: FileType.any);

      if (result != null) {
        final file = File(result.files.single.path!);
        if (await file.exists()) {
          await dbHelper.importDatabase(file);
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Text('تم استعادة النسخة الاحتياطية بنجاح'),
              backgroundColor: Colors.green,
            ),
          );
        } else {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Text('الملف غير موجود'),
              backgroundColor: Colors.red,
            ),
          );
        }
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('فشل استعادة النسخة الاحتياطية: $e'),
          backgroundColor: Colors.red,
        ),
      );
    }
  }

  Future<void> _backupToGoogleDrive(BuildContext context) async {
    String result = await dbHelper.backupToGoogleDrive();
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(result),
        backgroundColor: result.contains('✅') ? Colors.green : Colors.red,
      ),
    );
  }

  Future<void> _restoreBackupFromGoogleDrive(BuildContext context) async {
    String result = await dbHelper.restoreBackupFromGoogleDrive();
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(result),
        backgroundColor: result.contains('✅') ? Colors.green : Colors.red,
      ),
    );
  }

// دالة لإرجاع لون ثابت بناءً على البريد الإلكتروني
  Color getColorFromEmail(String email) {
    // توليد رقم ثابت بناءً على البريد الإلكتروني
    int hash = email.hashCode;
    // تحويل الرقم إلى لون باستخدام RGB
    return Color((hash & 0xFFFFFF) | 0xFF000000); // لون غير شفاف
  }

// دالة لإرجاع الحرف الأول من الاسم
  String getInitials(String name) {
    if (name.isEmpty) return '';
    List<String> parts = name.split(' ');
    if (parts.length == 1) {
      return parts[0][0].toUpperCase();
    } else {
      return '${parts[0][0].toUpperCase()}${parts[1][0].toUpperCase()}';
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      key: _scaffoldKey, // تعيين المفتاح هنا

      appBar: AppBar(title: const Text('النسخ الاحتياطي والاستعادة')),

      drawer: Drawer(
        child: Column(
          children: [
            Container(
              margin: const EdgeInsets.fromLTRB(0, 16, 0, 0),
              padding: const EdgeInsets.fromLTRB(20, 16, 20, 0),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Align(
                    alignment: Alignment.topRight,
                    child: IconButton(
                      icon: const Icon(Icons.close, color: Colors.red),
                      onPressed: () {
                        Navigator.pop(context);
                      },
                    ),
                  ),
                  const Text('حساباتي'),
                ],
              ),
            ),
            Container(width: double.infinity, height: 3, color: Colors.cyan),
            if (_currentUserData != null) ...[
              Container(
                width: double.infinity,
                decoration: BoxDecoration(
                  border:
                      Border(left: BorderSide(width: 1, color: Colors.cyan)),
                  image: DecorationImage(
                    image:
                        AssetImage('images/google.jpg'), // استبدل باسم الصورة
                    fit: BoxFit.cover,
                  ),
                ),
                child: Container(
                  color: Color.fromARGB(168, 0, 0, 0),
                  child: Column(
                    children: [
                      const SizedBox(height: 30),
                      Text(
                        'تم تسجيل الدخول الى قوقل بواسطة ',
                        style: TextStyle(
                          color: Colors.white,
                          fontSize: 16,
                          fontWeight: FontWeight.w300,
                        ),
                      ),
                      const SizedBox(height: 10),
                      CircleAvatar(
                        radius: 30,
                        backgroundColor:
                            _currentUserData!["photoUrl"] == null ||
                                    !_currentUserData!["photoUrl"]!
                                        .startsWith("http")
                                ? getColorFromEmail(
                                    _currentUserData!["email"] ?? '')
                                : null, // لا نحتاج إلى لون إذا كانت هناك صورة
                        backgroundImage:
                            _currentUserData!["photoUrl"] != null &&
                                    _currentUserData!["photoUrl"]!
                                        .startsWith("http")
                                ? NetworkImage(_currentUserData!["photoUrl"]!)
                                : null,
                        child: _currentUserData!["photoUrl"] == null ||
                                !_currentUserData!["photoUrl"]!
                                    .startsWith("http")
                            ? Text(
                                getInitials(
                                    _currentUserData!["displayName"] ?? ''),
                                style: TextStyle(
                                  color: Colors.white,
                                  fontSize: 24,
                                  fontWeight: FontWeight.bold,
                                ),
                              )
                            : null,
                      ),
                      const SizedBox(height: 20),
                      Text(
                        _currentUserData!["displayName"] ?? 'مستخدم غير معروف',
                        style: TextStyle(
                          color: Colors.white,
                          fontSize: 18,
                          fontWeight: FontWeight.w600,
                        ),
                      ),
                      const SizedBox(height: 10),
                      Text(
                        _currentUserData!["email"] ?? 'بريد غير متاح',
                        style: TextStyle(
                          color: Colors.yellow,
                          fontSize: 16,
                          fontWeight: FontWeight.w600,
                        ),
                      ),
                      const SizedBox(height: 20),
                    ],
                  ),
                ),
              ),
              Container(
                width: double.infinity,
                height: 3,
                color: Colors.cyan,
              ),
              const SizedBox(height: 20),
              ElevatedButton(
                onPressed: _handleSignOut,
                child: const Text('تسجيل الخروج'),
              ),
            ] else ...[
              ElevatedButton(
                onPressed: _handleSignIn,
                child: const Text('تسجيل الدخول باستخدام Google'),
              ),
            ],
          ],
        ),
      ),

      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Expanded(
                child: Column(
              children: [
                // مربع النسخ الاحتياطي المحلي
                Container(
                  decoration: BoxDecoration(
                      borderRadius: BorderRadius.circular(18),
                      border: Border.all(color: Colors.cyan, width: 2.0)),
                  child: Padding(
                    padding: const EdgeInsets.all(0.0),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.center,
                      children: [
                        // العنوان
                        Container(
                          width: double.infinity,
                          padding: const EdgeInsets.symmetric(vertical: 12.0),
                          decoration: const BoxDecoration(
                            color: Colors.cyan,
                            borderRadius: BorderRadius.only(
                              topLeft: Radius.circular(12.0),
                              topRight: Radius.circular(12.0),
                            ),
                          ),
                          child: const Text(
                            'محلي',
                            style: TextStyle(
                              fontSize: 18.0,
                              fontWeight: FontWeight.w800,
                              color: Colors.white,
                            ),
                            textAlign: TextAlign.center,
                          ),
                        ),
                        Container(
                          width: double.infinity,
                          height: 3,
                          color: Colors.cyan,
                        ),

                        const SizedBox(height: 10),
                        ElevatedButton(
                          onPressed: () => _createBackup(context),
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Colors.cyan,
                            foregroundColor: Colors.white,
                            padding: const EdgeInsets.symmetric(
                                horizontal: 20, vertical: 10),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(6),
                            ),
                          ),
                          child: const Text('💾 إنشاء نسخة احتياطية محليًا'),
                        ),
                        const SizedBox(height: 10),
                        Container(
                          width: double.infinity,
                          height: 3,
                          color: Colors.cyan,
                        ),
                        const SizedBox(height: 10),
                        ElevatedButton(
                          onPressed: () => _restoreBackup(context),
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Colors.cyan,
                            foregroundColor: Colors.white,
                            padding: const EdgeInsets.symmetric(
                                horizontal: 20, vertical: 10),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(6),
                            ),
                          ),
                          child: const Text('📥 استعادة نسخة احتياطية محليًا'),
                        ),
                        const SizedBox(height: 16),
                      ],
                    ),
                  ),
                ),
                const SizedBox(height: 20),
                // مربع Google Drive
                Container(
                  decoration: BoxDecoration(
                      borderRadius: BorderRadius.circular(18),
                      border: Border.all(color: Colors.cyan, width: 2.0)),
                  child: Padding(
                    padding: const EdgeInsets.all(0.0),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.center,
                      children: [
                        // العنوان
                        Container(
                          width: double.infinity,
                          padding: const EdgeInsets.symmetric(vertical: 12.0),
                          decoration: const BoxDecoration(
                            color: Colors.cyan,
                            borderRadius: BorderRadius.only(
                              topLeft: Radius.circular(12.0),
                              topRight: Radius.circular(12.0),
                            ),
                          ),
                          child: const Text(
                            'Google Drive',
                            style: TextStyle(
                              fontSize: 18.0,
                              fontWeight: FontWeight.w800,
                              color: Colors.white,
                            ),
                            textAlign: TextAlign.center,
                          ),
                        ),
                        Container(
                          width: double.infinity,
                          height: 3,
                          color: Colors.cyan,
                        ),

                        const SizedBox(height: 10),
                        ElevatedButton(
                          onPressed: () => _backupToGoogleDrive(context),
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Colors.cyan,
                            foregroundColor: Colors.white,
                            padding: const EdgeInsets.symmetric(
                                horizontal: 20, vertical: 10),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(6),
                            ),
                          ),
                          child: const Text(
                              '📤 رفع النسخة الاحتياطية إلى Google Drive'),
                        ),
                        const SizedBox(height: 10),
                        ElevatedButton(
                          onPressed: () =>
                              _restoreBackupFromGoogleDrive(context),
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Colors.cyan,
                            foregroundColor: Colors.white,
                            padding: const EdgeInsets.symmetric(
                                horizontal: 20, vertical: 10),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(6),
                            ),
                          ),
                          child: const Text(
                              '📥 استعادة النسخة الاحتياطية من Google Drive'),
                        ),
                        const SizedBox(height: 10),
                      ],
                    ),
                  ),
                ),
              ],
            )),
          ],
        ),
      ),
    );
  }
}
 */


